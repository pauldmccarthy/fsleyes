###########################################################################
# This file defines the build process for fsleyes, as hosted at:
#
#    https://git.fmrib.ox.ac.uk/fsl/fsleyes/fsleyes
#
#    0. docker:    (Re-)build docker test images (upstream only, manually
#                  invoked)
#
#    1. test:      Unit tests
#
#    2. style:     Check coding style
#
#    3. doc:       Building/uploading user and API documentation using
#                  GitLab Pages.
#
#    4. build:     Building source and wheel distributions for
#                  releases (tags on upstream only)
#
#    5. deploy:    Uploading the source and wheel distributions
#                  PyPI (tags on upstream only, manually invoked)
#
# Custom docker images are used for several jobs - these images are
# available at:
#
#    https://hub.docker.com/u/pauldmccarthy/
#
# These images can be re-built by manually invoked CI jobs defined within
# the "docker" stage.
#
# The test and style stages are executed on all branches of upstream and
# fork repositories.
#
# The doc stage executed on release branches of the upstream repository.
#
# The build and deploy stages are only executed on release tags on
# the upstream repository.
#
# Source and wheel distributions are deployed to pypi for release tags.
###########################################################################


stages:
 - docker
 - test
 - style
 - doc
 - build
 - deploy


#################################################################################
# A number of variables must be set for the jobs to work. The following
# variables are implicitly defined in any gitlab CI job:
#
#   - CI_PROJECT_PATH    - gitlab namespace/project
#   - CI_COMMIT_REF_NAME - branch name, provided by gitlab
#   - CI_COMMIT_TAG      - present if build is running on a tag
#
# These variables must be explicitly set as "secret" variables:
#

#   - SSH_PRIVATE_KEY_FSL_DOWNLOAD   - private key for downloading some FSL
#                                      files from a remote server (FSL_HOST)
#
#   - FSL_HOST:                      - Username@host to download FSL data from
#                                      (e.g. "paulmc@jalapeno.fmrib.ox.ac.uk")
#
#   - FSL_ATLAS_DIR:                 - Location of the FSL atlas data on
#                                      FSL_HOST.
#
#   - TWINE_USERNAME:                - Username to use when uploading to pypi
#
#   - TWINE_PASSWORD:                - Password to use when uploading to pypi
#
#   - TWINE_REPOSITORY_URL:          - Pypi repository to upload to
#
#   - ZENODO_URL:                    - Zenodo URL to deposit release file to.
#
#   - ZENODO_TOKEN:                  - Zenodo access token.
#
#   - ZENODO_DEPOSIT_ID:             - Deposit ID of previous Zenodo deposit.
###############################################################################


variables:
  UPSTREAM_PROJECT: "fsl/fsleyes/fsleyes"
  UPSTREAM_URL:     "git@git.fmrib.ox.ac.uk"


####################################
# These anchors are used to restrict
# when and where jobs are executed.
####################################


.only_release_branches: &only_release_branches
  only:
    - /^v.+$/@fsl/fsleyes/fsleyes

.only_releases: &only_releases
  only:
    - tags@fsl/fsleyes/fsleyes


.setup_ssh: &setup_ssh
  before_script:
    - bash ./.ci/setup_ssh.sh


##############
# Docker stage
##############


# (Re-)builds docker images for testing.
.build-docker-image:
  stage: docker
  image: docker:latest
  tags:
    - docker_build
  services:
    - docker:dind
  when: manual
  allow_failure: true
  only:
    - main@fsl/fsleyes/fsleyes

  script:
    - mkdir -p $HOME/.docker/
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
    - TAG="$(date +%Y%m%d).${CI_COMMIT_SHORT_SHA}"
    - IMAGE="pauldmccarthy/$(basename $BUILDDIR)"
    - DOCKERFILE=${BUILDDIR}/Dockerfile
    - docker build -t "${IMAGE}:${TAG}" -t "${IMAGE}:latest" -f ${DOCKERFILE} ./.docker
    - docker push "${IMAGE}:${TAG}"
    - docker push "${IMAGE}:latest"

build-docker-image-fsleyes-py37-wxpy4-gtk3:
  extends: .build-docker-image
  variables:
    BUILDDIR: .docker/fsleyes-py37-wxpy4-gtk3

build-docker-image-fsleyes-py38-wxpy4-gtk3:
  extends: .build-docker-image
  variables:
    BUILDDIR: .docker/fsleyes-py38-wxpy4-gtk3

build-docker-image-fsleyes-py39-wxpy4-gtk3:
  extends: .build-docker-image
  variables:
    BUILDDIR: .docker/fsleyes-py39-wxpy4-gtk3

build-docker-image-fsleyes-py310-wxpy4-gtk3:
  extends: .build-docker-image
  variables:
    BUILDDIR: .docker/fsleyes-py310-wxpy4-gtk3

build-docker-image-fsleyes-py311-wxpy4-gtk3:
  extends: .build-docker-image
  variables:
    BUILDDIR: .docker/fsleyes-py311-wxpy4-gtk3

build-docker-image-fsleyes-py312-wxpy4-gtk3:
  extends: .build-docker-image
  variables:
    BUILDDIR: .docker/fsleyes-py312-wxpy4-gtk3


############
# Test stage
############

.test_rules: &test_rules
  rules:
    # Set FSLEYES_SKIP_TESTS to skip tests
    - if:   '$FSLEYES_SKIP_TESTS != null'
      when: never
    # Don't test if  "[skip-tests]"
    # is in the commit message
    - if:   '$CI_COMMIT_MESSAGE =~ /\[skip-tests\]/'
      when: never
    - if:   '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - if:   '$CI_PIPELINE_SOURCE == "web"'
      when: on_success

# some test jobs are only run on the upstream repo
.test_rules_upstream: &test_rules_upstream
  rules:
    # Releases are just tags on a release
    # branch, so we don't need to test them.
    - if:   '$CI_COMMIT_TAG != null'
      when: never
    # Don't test if  "[skip-tests]"
    # is in the commit message
    - if:   '$CI_COMMIT_MESSAGE =~ /\[skip-tests\]/'
      when: never
    # Set FSLEYES_SKIP_TESTS to skip tests
    - if:   '$FSLEYES_SKIP_TESTS != null'
      when: never
    - if:   '$CI_PROJECT_PATH != $UPSTREAM_PROJECT'
      when: never
    - if:   $CI_PROJECT_PATH == $UPSTREAM_PROJECT && $CI_COMMIT_BRANCH =~ /^v.+$/
      when: on_success
    - if:   '$CI_PIPELINE_SOURCE == "web"'
      when: on_success

.test: &test_template
  <<: *setup_ssh
  <<: *test_rules

  tags:
    - docker

  script:
    - bash ./.ci/test_template.sh
  artifacts:
    when: on_failure
    expire_in: 1 day
    paths:
      - failures/


# offscreen tests only on macos
test:macos:
  <<: *test_rules
  stage: test
  tags:
    - macOS
    - shell
  variables:
    MACOS_OVERLAY_TEST: 1
  script:
    - bash ./.ci/test_template.sh
  artifacts:
    when: on_failure
    expire_in: 1 day
    paths:
      - failures/


test:3.9:
  stage: test
  image: pauldmccarthy/fsleyes-py39-wxpy4-gtk3
  <<: *test_template
  <<: *test_rules_upstream


test:3.10:
  stage: test
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3
  <<: *test_template
  <<: *test_rules


test:3.11:
  stage: test
  image: pauldmccarthy/fsleyes-py311-wxpy4-gtk3
  <<: *test_template
  <<: *test_rules_upstream


test:3.12:
  stage: test
  image: pauldmccarthy/fsleyes-py312-wxpy4-gtk3
  <<: *test_template
  <<: *test_rules_upstream


test:build-pypi-dist:
  stage: test
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3
  <<: *test_rules

  tags:
    - docker

  script:
   - source /test.venv/bin/activate
   - bash ./.ci/build_pypi_dist.sh


#############
# Style stage
#############


style:
  stage: style
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3
  <<: *test_template
  variables:
    TEST_STYLE: "true"


#############
# Pages stage
#############


pages:
  <<: *only_release_branches

  tags:
    - docker

  stage: doc
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3

  script:
    - bash ./.ci/build_userdoc.sh
    - bash ./.ci/build_apidoc.sh

  artifacts:
    paths:
      - public


#############
# Build stage
#############


build-pypi-dist:
  <<: *only_releases

  stage: build
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3

  tags:
    - docker

  # Make sure that the version in the code is
  # up to date (i.e. equal to the tag name).
  before_script:
    - bash ./.ci/check_version.sh

  script:
   - bash ./.ci/build_pypi_dist.sh

  artifacts:
    expire_in: 1 day
    paths:
      - dist/*tar.gz
      - dist/*whl


##############
# Deploy stage
##############


deploy-pypi:
  <<: *only_releases
  <<: *setup_ssh
  stage: deploy
  when:  manual
  image: python:3.10

  tags:
    - docker

  dependencies:
    - build-pypi-dist

  script:
    - bash ./.ci/deploy_pypi.sh


deploy-zenodo:
  <<: *only_releases
  <<: *setup_ssh
  stage: deploy
  when:  manual
  image: python:3.10

  tags:
    - docker

  dependencies:
    - build-pypi-dist

  script:
    - bash ./.ci/zenodo_deposit.sh fsleyes "$ZENODO_URL" "$ZENODO_TOKEN" "$ZENODO_DEPOSIT_ID"
