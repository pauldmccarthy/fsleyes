# Edge detection routine for 2D textures - see also edge3D.prog.
#
# Inputs:
#
#   {{ texture  }}   - 2D texture to run edge detection on
#   {{ texCoord }}   - Texture coordinate at which to to test for edges
#   {{ offsets  }}   - Distance from this texcoord around which to sample
#                      the texture. Channels with a negative offset will
#                      not be tested.
#   {{ val      }}   - Value at the given texCoord.
#   {{ tol      }}   - Value tolerance
#
# Result:
#   {{ out_isEdge }} - {{ out_isEdge }}.i will be set to 1 if axis i lies on
#                      an edge, 0 otherwise. Untested axes are set to 0.
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

{{ arb_temp('off')          }}
{{ arb_temp('back')         }}
{{ arb_temp('front')        }}
{{ arb_temp('tempCoord')    }}
{{ arb_temp('isEdgeBack')   }}
{{ arb_temp('isEdgeFront')  }}

MOV {{ back        }}, 0;
MOV {{ front       }}, 0;
MOV {{ isEdgeFront }}, 0;
MOV {{ isEdgeFront }}, 0;

# TODO make this a user-settable constant,
# and merge this with edge3D.prog
{% set numaxes      = 2 %}
{% set offsetmasks  = ['{1, 0, 0, 0}', '{0, 1, 0, 0}', '{0, 0, 1, 0}', '{0, 0, 0, 1}'] %}
{% set testchannels = ['x', 'y', 'z', 'w'] %}

{% for i in range(numaxes) %}

{% set offmask = offsetmasks[ i] %}
{% set tchan   = testchannels[i] %}

# Test along the current axis
MOV {{ off }}, {{ offsets }};
MUL {{ off }}, {{ off     }}, {{ offmask }};

# Sample a value behind the coordinate
MOV {{ tempCoord }}, {{ texCoord }};
ADD {{ tempCoord }}, {{ tempCoord }}, {{ off }};
TEX {{ back      }}, {{ tempCoord }}, {{ texture }}, 2D;

# Sample a value in front of the coordinatea
MOV {{ tempCoord }}, {{ texCoord }};
SUB {{ tempCoord }}, {{ tempCoord }}, {{ off }};
TEX {{ front     }}, {{ tempCoord }}, {{ texture }}, 2D;

# Calculate absolute difference between the
# central value and the front/back values.
SUB {{ back  }}, {{ back  }}, {{ val }};
SUB {{ front }}, {{ front }}, {{ val }};
ABS {{ back  }}, {{ back  }};
ABS {{ front }}, {{ front }};

# Set back.x/front.x if there
# is an edge on any channel
MAX {{ back  }}.x, {{ back  }}.x, {{ back  }}.y;
MAX {{ back  }}.x, {{ back  }}.x, {{ back  }}.z;
MAX {{ back  }}.x, {{ back  }}.x, {{ back  }}.a;
MAX {{ front }}.x, {{ front }}.x, {{ front }}.y;
MAX {{ front }}.x, {{ front }}.x, {{ front }}.z;
MAX {{ front }}.x, {{ front }}.x, {{ front }}.a;

# Set the isEdgeBack/Front flags if the
# difference is greater than the tolerance
SLT {{ isEdgeBack  }}.{{ tchan }}, {{ tol }}, {{ back  }}.x;
SLT {{ isEdgeFront }}.{{ tchan }}, {{ tol }}, {{ front }}.x;

# Set out_isEdge.i if there was an
# edge on any side of the i axis.
DP4 {{ isEdgeBack  }}.{{ tchan }}, {{ isEdgeBack  }}.{{ tchan }}, {{ isEdgeBack  }}.{{ tchan }};
DP4 {{ isEdgeFront }}.{{ tchan }}, {{ isEdgeFront }}.{{ tchan }}, {{ isEdgeFront }}.{{ tchan }};

{% endfor %}

# Set isEdge to 1 whereever either
# isEdgeBack or isEdgeFront are 1
MAX {{ out_isEdge }}, {{ isEdgeBack }}, {{ isEdgeFront }};

# Channels may be > 1 if there is an
# edge on more than one side, so we
# force all channels to be either 0 or 1
SUB {{ out_isEdge }}, {{ out_isEdge }}, 0.5;
CMP {{ out_isEdge }}, {{ out_isEdge }}, 0, 1;

# Clear if offsets[i] < 0 - this allows
# individual axes to be skipped
CMP {{ out_isEdge }}, {{ offsets }}, 0, {{ out_isEdge }};
