!!ARBvp1.0
#
# Vertex program for rendering GLMesh instances in 3D, colouring them with a
# constant colour.
#
# Input parameters:
#
#    {{ param3_normalMatrix }} - Matrix to transform normal vectors into
#                                display coordinates.
#
# Input attributes:
#    {{ attr_normal }}         - Vertex normal vector
#
# Outputs:
#    {{ varying_vertex }}      - The vertex position in view coordinates.
#    {{ varying_normal }}      - As above, passed through to fragment shader.
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

PARAM normalMatrix[3] = {{ param3_normalMatrix }};

TEMP normal;

# Transform the vertex position into clip coordinates
DP4 result.position.x, state.matrix.mvp.row[0], vertex.position;
DP4 result.position.y, state.matrix.mvp.row[1], vertex.position;
DP4 result.position.z, state.matrix.mvp.row[2], vertex.position;
DP4 result.position.w, state.matrix.mvp.row[3], vertex.position;

# Transform the vertex position into display coordinates
DP4 {{ varying_vertex }}.x, state.matrix.modelview[0].row[0], vertex.position;
DP4 {{ varying_vertex }}.y, state.matrix.modelview[0].row[1], vertex.position;
DP4 {{ varying_vertex }}.z, state.matrix.modelview[0].row[2], vertex.position;
DP4 {{ varying_vertex }}.w, state.matrix.modelview[0].row[3], vertex.position;

# Transform the normal vector
DP3 normal.x, normalMatrix[0], {{ attr_normal }};
DP3 normal.y, normalMatrix[1], {{ attr_normal }};
DP3 normal.z, normalMatrix[2], {{ attr_normal }};

# Normalise to unit length
DP3 normal.w, normal, normal;
RSQ normal.w, normal.w;
MUL normal,   normal, normal.w;
MOV normal.w, 0;

MOV {{ varying_normal }}, normal;

END
