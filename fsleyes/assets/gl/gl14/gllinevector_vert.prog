!!ARBvp1.0
#
# Vertex program for rendering GLLineVector instances.
#
# Input parameters:
#
#    invImageShape    - (first three components) inverse of image shape
#    clipCoordXform   - Matrix which transforms image texture coordinates
#                       into clip image texture coordinates.
#    colourCoordXform - Matrix which transforms image texture coordinates
#                       into colour image texture coordinates.
#    modCoordXform    - Matrix which transforms image texture coordinates
#                       into modulation image texture coordinates.
#
# Input attributes:
#    voxCoord  - Vector voxel coordinates
#
# Outputs:
#    texCoord     - Colour texture image coordinate
#    vecTexCoord  - Vector image texture coordinates
#    clipTexCoord - Clip image texture coordinates
#    modTexCoord  - Modulate image texture coordinates
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP vertexPos;
TEMP voxCoord;
TEMP vecTexCoord;
TEMP colourTexCoord;
TEMP clipTexCoord;
TEMP modTexCoord;

PARAM invImageShape       = {{ param_invImageShape     }};
PARAM clipCoordXform[4]   = {{ param4_clipCoordXform   }};
PARAM colourCoordXform[4] = {{ param4_colourCoordXform }};
PARAM modCoordXform[4]    = {{ param4_modCoordXform    }};

# Offset the vertex position by its voxel coordinates
MOV voxCoord, {{ attr_voxCoord }};
ADD vertexPos, vertex.position, voxCoord;
MOV vertexPos.w, 1;

# Transform the vertex position (which is in voxel
# coordinates) into display coordinates.  It is
# assumed that a voxel->display transformation has
# been encoded into the mvp matrix.
DP4 result.position.x, state.matrix.mvp.row[0], vertexPos;
DP4 result.position.y, state.matrix.mvp.row[1], vertexPos;
DP4 result.position.z, state.matrix.mvp.row[2], vertexPos;
DP4 result.position.w, state.matrix.mvp.row[3], vertexPos;

# Transform the voxel coordinates
# into vector texture coordinates
ADD vecTexCoord, voxCoord, 0.5;
MUL vecTexCoord, vecTexCoord, invImageShape;
MOV vecTexCoord.w, 1;

# Transform the vector image texture
# coordinates into clip/colour/modulate
# image texture coordinates.
DP4 clipTexCoord.x,   clipCoordXform[0],   vecTexCoord;
DP4 clipTexCoord.y,   clipCoordXform[1],   vecTexCoord;
DP4 clipTexCoord.z,   clipCoordXform[2],   vecTexCoord;
DP4 clipTexCoord.w,   clipCoordXform[3],   vecTexCoord;
DP4 colourTexCoord.x, colourCoordXform[0], vecTexCoord;
DP4 colourTexCoord.y, colourCoordXform[1], vecTexCoord;
DP4 colourTexCoord.z, colourCoordXform[2], vecTexCoord;
DP4 colourTexCoord.w, colourCoordXform[3], vecTexCoord;
DP4 modTexCoord.x,    modCoordXform[0],    vecTexCoord;
DP4 modTexCoord.y,    modCoordXform[1],    vecTexCoord;
DP4 modTexCoord.z,    modCoordXform[2],    vecTexCoord;
DP4 modTexCoord.w,    modCoordXform[3],    vecTexCoord;

# Pass texture and voxel coordinates
# through to the fragment program.
MOV {{ varying_vecTexCoord  }}, vecTexCoord;
MOV {{ varying_texCoord     }}, colourTexCoord;
MOV {{ varying_clipTexCoord }}, clipTexCoord;
MOV {{ varying_modTexCoord  }}, modTexCoord;

END
