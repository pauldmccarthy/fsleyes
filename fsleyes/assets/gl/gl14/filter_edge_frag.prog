!!ARBfp1.0
#
# Fragment program used for edge filter - see the
# fsleyes.gl.shaders.filter module.
#
# This is to be used with the filter_vert.prog vertex shader.
#
# Input uniforms:
#   {{ param_offsets  }} - how far away to search for edge (see edge2D.prog)
#   {{ param_outline  }} - If == 1, edges are drawn and non-edges are clipped.
#                          If == 0, edges are clipped and non-edges are drawn.
#
#
# Input varyings:
#   {{ varying_texCoord }} - Texture coordinates for this fragment
#
# Input textures:
#   {{ texture_texture  }} - 2D texture containing the filter input

{{ arb_include('edge2D.prog') }}


TEMP colour;
TEMP tol;
TEMP isEdge;

# Tolerance = {1 / 255, 1 / 255, 1 / 255, 1 / 255}
MOV tol, {0.0039215, 0.0039215, 0.0039215, 0.0039215};

# Look up the colour at the current fragment
TEX colour, {{ varying_texCoord }}, {{ texture_texture }}, 2D;

# Test whether this fragment is on an edge

{{
arb_call('edge2D.prog',
         texture='{{ texture_texture }}',
         texCoord='{{ varying_texCoord }}',
         offsets='{{ param_offsets }}',
         val='colour',
         tol='tol',
         out_isEdge='isEdge')
}}

# Make isEdge.x 1 if there
# is an edge on any axis.
MAX isEdge.x, isEdge.x, isEdge.y;

#
# If drawing edges, and this
# fragment is not on an edge,
# kill the fragment.
#
# Simiarly, if clipping edges,
# and this fragment is on an edge,
# kill the fragment.
#
# This boils down to testing whether
# isEdge.x == outline.x

SUB isEdge.x, isEdge.x, {{ param_outline }}.x;
ABS isEdge.x, isEdge.x;

# isEdge.x is now 0 if
# isEdge.x == outline.x,
# 1 otherwise
MAD isEdge.x, isEdge.x, -1, 0.5;
KIL isEdge.x;

MOV result.color, colour;

END